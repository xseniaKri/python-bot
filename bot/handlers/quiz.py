from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from random import randint
from os import getenv
from dotenv import load_dotenv

from bot.states.quiz_states import Quiz
from bot.data.questions import questions, good_answers, bad_answers, final_vars
from bot.keyboards.quiz_kb import generate_keyboard
from bot.db.crud import add_result, get_result
from bot.create_bot import bot

load_dotenv()
ADMIN_ID = getenv("ADMIN_ID")
quiz_router = Router()

@quiz_router.callback_query(F.data == '–î–∞')
async def start_quiz_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    print(data.get("completed"))
    if data.get("completed"):

        await callback.message.answer(text="–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç!")
        return

    await state.set_state(Quiz.question)
    await state.update_data(current_question=0, correct_answers=0)
    await callback.message.answer(text=f"–°—É–ø–µ—Ä! –¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º.\n"
                                 f"–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: 3-5 –º–∏–Ω—É—Ç.\n"
                                 f"–í—ã–±–∏—Ä–∞–π—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, –ø–æ—Å–∫–æ–ª—å–∫—É —Ç–µ–∫—Å—Ç —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–º.\n")
    await send_question(callback.message, state)

async def send_question(message: types.Message | types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    idx = data.get("current_question", 0)
    question = questions[idx]
    await message.answer(
        text=question['text'],
        reply_markup=generate_keyboard(question['options'])
    )

@quiz_router.callback_query(Quiz.question)
async def handle_answer(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    idx = data.get("current_question", 0)
    correct = data.get("correct_answers", 0)

    user_answer = callback.data
    question = questions[idx]

    if user_answer == question["correct"]:
        correct += 1
        choice = randint(0, 3)
        await callback.message.answer(good_answers[choice])
    else:
        choice = randint(0, 4)
        await callback.message.answer(bad_answers[choice] + f"\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct']}")

    idx += 1
    if idx == len(questions):
        await state.update_data(user_id=callback.from_user.id,
                                nickname=callback.from_user.username,
                                result=correct)
        await handle_end(callback=callback, correct=correct)
        await state.set_state(Quiz.hard_question)

    else:
        await state.update_data(current_question=idx, correct_answers=correct)
        await send_question(callback.message, state)

async def handle_end(callback: types.CallbackQuery, correct: int) -> None:
    if correct in [0, 1, 2]:
        first = "–í—ã –≤ –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏, –Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç –∫–ª–∞—Å—Å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!\n\n"
        level = "–í—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ –≤–ª–∞–¥–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º.\n"
    elif correct in [3, 4]:
        first = "–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å)\n\n"
        level = "–í—ã –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º —É—Ä–æ–≤–Ω–µ –∏–ª–∏ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –Ω–µ–º—É.\n"
    else:
        first = "–í—ã –ø—Ä–æ–¥–µ–ª–∞–ª–∏ –±–æ–ª—å—à—É—é —Ä–∞–±–æ—Ç—É!\n\n"
        level = "–í–∞—à —É—Ä–æ–≤–µ–Ω—å —Å—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ\n"

    if correct in [0, 5, 6, 7, 8, 9, 10]:
        end = "–æ–≤"
    elif correct == 1:
        end = ""
    else:
        end = "–∞"


    name = callback.from_user.full_name or callback.from_user.username

    await callback.message.answer(
        text=(
            first + f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct} –±–∞–ª–ª{end}. " + level + "\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ç–µ—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–Ω–∞–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏. –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≥–æ–≤–æ—Ä–µ–Ω–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–∞ —Å–ª—É—Ö –Ω—É–∂–Ω–æ —É—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º."
        )
    )
    await callback.message.answer(
        text=(
            f"{name}, —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Å–ª–æ–∂–Ω–µ–µ –≤—Å–µ–≥–æ –¥–∞–µ—Ç—Å—è –í–∞–º?"
        ),
        reply_markup=generate_keyboard(final_vars)
    )

@quiz_router.callback_query(Quiz.hard_question)
async def handle_hard_answer(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    nickname = data.get("nickname")
    result = data.get("result")
    hard = callback.data
    name = callback.from_user.full_name
    await add_result(user_id=user_id, nickname=nickname, result=result, hard=hard)

    await callback.message.answer(text=(
        f"{name}, –ø–æ–Ω—è–ª –í–∞—Å.\n\n"
        f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫–∞–∫ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —ç—Ç–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏?\n\n"
        f"‚úçÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫.\n"
        f"‚úîÔ∏è–û–ø—Ä–µ–¥–µ–ª–∏–º –í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –±–µ–∑ –≤—Å—è–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤.\n"
        f"‚úîÔ∏è–ü–æ—Å—Ç—Ä–æ–∏–º —á–µ—Ç–∫–∏–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –í–∞—à–µ–π —Ü–µ–ª–∏.\n"
        f"üéÅ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –¢–æ–ø 25 —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —è–∑—ã–∫–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏.\n"
    ),
    reply_markup=generate_keyboard(["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"]))

    await state.clear()


@quiz_router.callback_query(F.data == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def send_info(callback: types.CallbackQuery):
    link = "@" + callback.from_user.username
    user_id = callback.from_user.id
    await callback.message.answer(text="–Ø —Å–≤—è–∂—É—Å—å —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
    info = await get_result(user_id=user_id)

    await bot.send_message(chat_id=ADMIN_ID, text=f"{link} —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ.\n"
                           f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {info['result']}.\n–°–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ: {info['hard']}")